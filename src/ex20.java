
public class ex20 {

	public static void main(String[] args) {
		//프로그램 개발 초급정도까지는 속성으로 배우면
		//취업수준까진 되고
		//그다음에 더 실력을 늘리려면...프로젝트해보고...연습....공부...
		//웹개발,웹퍼블리셔...자리도많고...
		
		//전자공학,기계공학 국비X
		//수학 잘해야되는건 국비
		//노베이스...X
		
		//코딩이 어렵다...
		//공대에서 그나마 젤 만만하게 코딩...
		//6개월...초급...
		//1년,2년...레벨업...
		
		//비트 연산자...
		//비트 끼리 연산하는 연산자...
		//&, | , ^, ~, <<, >>
		// & - 비트 AND
		// | - 비트 OR
		// ^ - 비트 XOR
		// ~ - 비트 반전
		// << - 비트 왼쪽이동
		// >> - 비트 오른쪽이동
		
		//2진수...
		//컴퓨터가 쓰는 숫자 체계 2진수
		
		//10진수...
		//사람이 쓰는 숫자 체계 10진수
		
		//1234
		//천이백삼십사
		//1X1000
		//2X100
		//3X10
		//4X1
		//1000+200+30+4
		//십진수가 십진수인 이유가...
		//10씩 곱해지니까...
		
		//십진수의 단위는 10씩 곱해지고...
		//자리에 쓸수있는 숫자 0~9
		
		//1001
		//1X8
		//0X4
		//0X2
		//1X1
		//9
		//2진수는 단위는 2씩 곱해지고...
		//자리에 쓸수있는 숫자 0~1
		
		//10진수 2진수
		//0     0
		//1     1   - 1X1
		//2     10  - 1X2 
		//3     11  - 1X2 + 1X1
		//4     100 - 1X4
		//5     101 - 1X4 + 1X1
		//6     110
		//7     111
		//8     1000
		//9     1001
		//10    1010
		//11    1011
		//12    1100 = 1011+1 = 1012 = 1020 = 1100
		//13    1101
		//...
		
		int num1=5;
		//int는 4바이트 정수 (32비트 정수)
		//00000000 00000000 00000000 00000101
		//정수 5의 실체
		
		int num2=3;
		//00000000 00000000 00000000 00000011
		
		int result = num1&num2;
		//num1과 num2의 비트를 AND한다.
		//00000000 00000000 00000000 00000101
		//00000000 00000000 00000000 00000011 &
		//00000000 00000000 00000000 00000001 결과
		System.out.printf("비트 and결과:%d\n",result);//1
		
		
		result = num1 | num2;
		//num1과 num2의 비트를 OR한다.
		//00000000 00000000 00000000 00000101
		//00000000 00000000 00000000 00000011 |
		//00000000 00000000 00000000 00000111 결과
		System.out.printf("비트 or결과:%d\n",result);//7
		
		result = num1 ^ num2;
		//num1과 num2의 비트를 XOR한다.
		//xor : exclusive or : 배타적인 or
		//include <-> exclude
		//포함하다 <-> 배제하다
		//exclusive : 배타적인
		//
		//값이 다를때 1이다.
		//비트 xor의 진리표
		
		//비트 xor
		// 0 ^ 0 -> 0
		// 0 ^ 1 -> 1
		// 1 ^ 0 -> 1 
		// 1 ^ 1 -> 0
		//입력이 다를때만 결과가 1이다.
		//배타적인 or
		
		//비트 or
		// 0 | 0 -> 0
		// 0 | 1 -> 1
		// 1 | 0 -> 1 
		// 1 | 1 -> 1
		
		result = num1 ^ num2;
		//num1과 num2의 비트를 xor한다.
		//00000000 00000000 00000000 00000101
		//00000000 00000000 00000000 00000011 ^
		//00000000 00000000 00000000 00000110 결과
		//6
		System.out.printf("비트 or결과:%d\n",result);//6
		
		//비트 연산자는 당장 그렇게 중요한건 아니고...
		//네트워크 관련 프로그램이면...이게 좀 쓰임...
		
		//연산자 중요한거
		//대입,사칙
		//관계,논리
		
	}
}
